# ----------------------------------------------------------------------------------------------- #
#   Global variables
# ----------------------------------------------------------------------------------------------- #
- PATH: 
    H2: &H2_cs_path
        U:/__[FileSync]__/Coding/Python/CrossSectionFile/H2
    CO2: &CO2_cs_path
        E:/Coding/PlasmaChemistry/_cs_list/koelman2016
    CO: &CO_cs_path
        E:/Coding/PlasmaChemistry/_cs_list/koelman2016

- H2_vib: &H2_vib_0-14
    [
    H2,      H2(v1),  H2(v2),  H2(v3),  H2(v4),
    H2(v5),  H2(v6),  H2(v7),  H2(v8),  H2(v9),
    H2(v10), H2(v11), H2(v12), H2(v13), H2(v14)
    ]

- H2_vib: &H2_vib_0-13
    [
    H2,      H2(v1),  H2(v2),  H2(v3),  H2(v4),
    H2(v5),  H2(v6),  H2(v7),  H2(v8),  H2(v9),
    H2(v10), H2(v11), H2(v12), H2(v13)
    ]
- CO_vib: &CO_vib_0-10
    [
    CO,     CO(v1), CO(v2), CO(v3), CO(v4),
    CO(v5), CO(v6), CO(v7), CO(v8), CO(v9),
    CO(v10)
    ]


- Molecule:
    mass:
        - &CO2_mass   44
        - &CO_mass    28

# ----------------------------------------------------------------------------------------------- #
#   H2 ele vibrational excitation
# ----------------------------------------------------------------------------------------------- #
- Rctn_block: &H2_ele_vib_rctn_forward
    type:
        excitation
    formula:
        E + H2(vA@) => E + H2(vB@)
    kstr:
        "cs_path/H2(X)_to_H2(X)_vibexc/H2(vA@)_to_H2(vB@).csv"
    threshold:
        thres@
    where: # where is only supported for formula and kstr. After iterator process.
        abbr:
            cs_path: *H2_cs_path
            H2(v0): H2
    iterator: &H2_ele_vib_iterator
        repl:
            formula:
                A@: _from
                B@: _to
            kstr:
                A@: _from
                B@: _to
            threshold:
                thres@: H2_vib_energy_in_eV(v=_to) - H2_vib_energy_in_eV(v=_from)
        loop:
            _from: range(15)
            _to: range(15)
        condition:
            _from < _to

- Rctn_block: &H2_ele_vib_rctn_backward
    <<: *H2_ele_vib_rctn_forward
    type:
        deexcitation
    iterator:
        <<: *H2_ele_vib_iterator
        condition:
            _from > _to

# ----------------------------------------------------------------------------------------------- #
#   H2 dissociation to H atom.
# ----------------------------------------------------------------------------------------------- #
- Rctn_block: &_H2_ele_dis
    type:
        EXCITATION
    formula:
        E + A@ => E + H + H
    where:
        abbr:
            - cs_path: *H2_cs_path

- Rctn_block: &H2_ele_dis_rctn_via_b
    <<: *_H2_ele_dis
    threshold:
        thres@
    kstr:
        "cs_path/H2(X)_to_H2(_b)_to_2H/A@_to_H2(b)_to_2H.csv"
    iterator:
        repl:
            formula:
                A@: _i_
            kstr:
                A@: _i_
            threshold:
                thres@: _thres_
        loop:
            _i_: *H2_vib_0-13
            _thres_: 
                [6.58, 4.06, 3.58, 3.12, 2.70,
                 2.30, 1.94, 1.60, 1.30, 1.02,
                 0.78, 0.56, 0.38, 0.22]


- Rctn_block: &H2_ele_dis_rctn_via_B
    <<: *_H2_ele_dis
    threshold:
        # !eval ""
    kstr:
        "cs_path/H2(X)_to_H2(B)_to_2H/A@_to_H2(B)_to_2H.csv"
    zip:
        A@: *H2_vib_0-14
    where:
        abbr:
            - cs_path: *H2_cs_path

- Rctn_block: &H2_ele_dis_rctn_via_B_1
    <<: *_H2_ele_dis
    threshold:
        # !eval ""
    kstr:
        cs_path/H2(X)_to_H2(B')_to_2H/A@_to_H2(B')_to_2H.csv
    zip:
        A@: *H2_vib_0-14
    where:
        abbr:
            - cs_path: *H2_cs_path

- Rctn_block: &H2_ele_dis_rctn_via_B_2
    <<: *_H2_ele_dis
    threshold:
        # !eval ""
    kstr:
        "cs_path/H2(X)_to_H2(B'')_to_2H/A@_to_H2(B'')_to_2H.csv"
    zip:
        A@: *H2_vib_0-14
    where:
        abbr:
            - cs_path: *H2_cs_path
# ----------------------------------------------------------------------------------------------- #
- Rctn_block: &H2_ele_dis_att_rctn
    type:
        ATTACHMENT
    formula:
        E + A@ => H + H^-
    threshold:
        # !eval ""
    kstr:
        "cs_path/H2(X)_to_H2-_to_H+H-/@A_to_H2-_to_H+H-.csv"
    zip:
        A@: [H2, H2(v1), H2(v2), H2(v3), H2(v4), H2(v5)]
    where:
        abbr:
            - cs_path: *H2_cs_path

# ----------------------------------------------------------------------------------------------- #
#   CO2 ele vibrational excitation
# ----------------------------------------------------------------------------------------------- #
- Rctn_block: &CO2_ele_vib_rctn_forward
    type: 
        EXCITATION
    formula:
        E + CO2(vA@) => E + CO2(vB@)
    kstr:
        "cs_path/cs_set/scaling/CO2/0-21/cs_A@_excitation_B@.lut"
    threshold:
        thres@
    where:
        abbr:
            cs_path: *CO2_cs_path
            CO2(v0): CO2
    iterator:
        repl:
            formula:
                A@: _from
                B@: _to
            kstr:
                A@: _from
                B@: _to
            threshold:
                thres@: CO2_vib_energy_in_eV(v=_to) - CO2_vib_energy_in_eV(v=_from)
        loop:
            _from: range(21)
            _to: range(21)
        condition:
            _from < _to

- Rctn_block: &CO2_ele_vib_rctn_backward
    <<: *CO2_ele_vib_rctn_forward
    type:
        DEEXCITATION
    threshold:
        "[CO2_vib_energy_in_eV(v=(0, 0, _to)) - CO2_vib_energy_in_eV(v=(0, 0, _from)) 
                for _from in range(22) 
                for _to in range(22) if _from > _to]"
    kstr:
        "cs_path/cs_set/scaling/CO2/0-21/cs_A@_excitation_B@.lut"
    lambda: 
        "lambda x: 
        [x.replace('A@', f'CO2(v{_from})').replace('B@', f'CO2(v{_to})').replace('CO2(v0)', 'CO2')
        for _from in range(22)
        for _to in range(22) if _from > _to]"
        
# ----------------------------------------------------------------------------------------------- #
#   CO ele vibrational excitation
# ----------------------------------------------------------------------------------------------- #
- Rctn_block: &CO_ele_vib_rctn_forward
    type:
        excitation
    formula:
        E + CO(vA@) => E + CO(vB@)
    threshold:
        "[CO_vib_energy_in_eV(v=_to) - CO_vib_energy_in_eV(v=_from) 
                for _from in range(11) 
                for _to in range(11) if _from < _to]"
    kstr:
        "cs_path/cs_set/scaling/CO/cs_COvA@_vibexc_COvB@.lut"
    lambda:
        "lambda x:
        [x.replace('A@', f'{_from}').replace('B@', f'{_to}').replace('CO(v0)', 'CO')
        for _from in range(11)
        for _to in range(11) if _from < _to]"
    where:
        abbr:
            - cs_path: *CO_cs_path

- Rctn_block: &CO_ele_vib_rctn_backward
    <<: *CO_ele_vib_rctn_forward
    type: 
        deexcitation
    threshold:
        "[CO_vib_energy_in_eV(v=_to) - CO_vib_energy_in_eV(v=_from) 
                for _from in range(11) 
                for _to in range(11) if _from > _to]"
    kstr:
        "cs_path/cs_set/reverse/CO/cs_COvB@_vibexc_COvA@_reverse.lut"
    lambda:
        "lambda x:
        [x.replace('A@', f'{_from}').replace('B@', f'{_to}').replace('CO(v0)', 'CO')
        for _from in range(11)
        for _to in range(11) if _from > _to]"



# ----------------------------------------------------------------------------------------------- #
#   Vibrational relaxation process
# ----------------------------------------------------------------------------------------------- #
- Rctn_block: &CO

- Rctn_block: &CO2_VT_with_CO
    type: 
        VT
    formula:
        CO2(v1) + M@ => CO2 + M@
    kstr:   k10 * F
    where:
        vari:
            - k10_0:  !LT [4.25e-1, -407, 824]
            - k10_1:  !LT [4.25e-1, -404, 1096]
            - k10_2:  !LT [4.25e-1, -252, 685]
            - k10:    k10_0 + k10_1 + k10_2
            - _mu:    22
            - _r:     4.587156
            - Lij:    0.32 * dE_K/_r * sqrt(_mu/Tgas)
            - F:      0.5 * (3 - exp(-2/3*Lij)) * exp(-2/3*Lij)
        

- Rctn_block: &CO2_VT_with_CO2
    type:
        VT
    formula:
        CO2(vA@) + M@ => CO2(vB@) + M@
    kstr:   
        k10 * F / dE@
    where:
        abbr:
            CO2(v0): CO2
        vari:
            - k10_0:  !LT [4.25e-1, -407, 824]
            - k10_1:  !LT [4.25e-1, -404, 1096]
            - k10_2:  !LT [4.25e-1, -252, 685]
            - k10:    k10_0 + k10_1 + k10_2
            - _mu:    22
            - _r:     4.587156
            - Lij:    0.32 * dE@/_r * sqrt(_mu/Tgas)
            - F:      0.5 * (3 - exp(-2/3*Lij)) * exp(-2/3*Lij)
    iterator:
        repl:
            formula:
                A@: _i_ 
                B@: _i_ - 1
                M@: _M_
            kstr:
                dE@: CO_vib_energy_in_eV(v=_i_) - CO_vib_energy_in_eV(v=_i_-1)
        loop:
            _M_: *CO_vib_0-10
            _i_: range(1, 22)

- Rctn_block: &CO2_VT_with_CO2_reversed
    <<: *CO2_VT_with_CO2
    formula:
        CO2(vB@) + M@ => CO2(vA@) + M@
    kstr:
        k10 * F / dE

# ----------------------------------------------------------------------------------------------- #
- Rctn_block: &OH_VT
    type: VT
    formula:
        OH(v1) + M@ => OH + M@
    kstr:
        A@ * exp( 39.3 - 210 * Tgas**(-1/3) )
    zip:
        M@: [N2,  O2,  CO,  CO2, H2O]
        A@: [1.0, 3.0, 1.0, 7.0, 60.0]

# ----------------------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
- The reactions considered:
    # - *CO2_VT_with_CO
    electron reactions:
        H2_ele_vib_rctn_forward:  *H2_ele_vib_rctn_forward
        H2_ele_vib_rctn_backward: *H2_ele_vib_rctn_backward
        # H2_ele_dis_rctn_via_b:    *H2_ele_dis_rctn_via_b
        # CO2_ele_vib_rctn_forward: *CO2_ele_vib_rctn_forward
        # CO_ele_vib_rctn_forward: *CO_ele_vib_rctn_forward
        # CO_ele_vib_rctn_backward: *CO_ele_vib_rctn_backward
        CO2_VT_with_CO2: *CO2_VT_with_CO2
    # - *H2_ele_dis_rctn_via_B
    # - *H2_ele_dis_rctn_via_B_1
    # - *H2_ele_dis_rctn_via_B_2
